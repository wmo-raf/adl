# Generated by Django 5.0.6 on 2024-06-27 12:24

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django_countries.fields
import timescale.db.models.fields
import wis2box_adl.utils
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0093_uploadedfile'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the variable', max_length=255, verbose_name='Name')),
                ('parameter', models.CharField(choices=wis2box_adl.utils.get_data_parameters_as_choices, max_length=255, unique=True, verbose_name='Parameter')),
                ('unit', models.CharField(help_text='Unit of the variable', max_length=255, verbose_name='Unit')),
                ('description', models.TextField(help_text='Description of the variable', verbose_name='Description')),
            ],
        ),
        migrations.CreateModel(
            name='Network',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the network', max_length=255, verbose_name='Name')),
                ('type', models.CharField(choices=[('automatic', 'Automatic Weather Stations'), ('manual', 'Manual Weather Stations')], help_text='Weather station type', max_length=255, verbose_name='Weather Stations Type')),
                ('plugin', models.CharField(blank=True, choices=[], help_text='Plugin to use for this network', max_length=255, null=True, verbose_name='Plugin')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Network',
                'verbose_name_plural': 'Networks',
            },
        ),
        migrations.CreateModel(
            name='AdlSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', django_countries.fields.CountryField(max_length=2, verbose_name='Country')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('station_id', models.CharField(help_text='Unique Station Identifier', max_length=255, verbose_name='Station ID')),
                ('name', models.CharField(help_text='Name of the station', max_length=255, verbose_name='Name')),
                ('wsi_series', models.PositiveIntegerField(help_text='WIGOS identifier series', verbose_name='WSI Series')),
                ('wsi_issuer', models.PositiveIntegerField(help_text='WIGOS issuer of identifier', verbose_name='WSI Issuer')),
                ('wsi_issue_number', models.PositiveIntegerField(help_text='WIGOS issue number', verbose_name='WSI Issue Number')),
                ('wsi_local', models.CharField(help_text='WIGOS local identifier', max_length=255, verbose_name='WSI Local')),
                ('wmo_block_number', models.PositiveIntegerField(help_text='WMO block number', verbose_name='WMO Block Number')),
                ('wmo_station_number', models.PositiveIntegerField(help_text='WMO station number', verbose_name='WMO Station Number')),
                ('station_type', models.PositiveIntegerField(choices=[(0, 'Automatic'), (1, 'Manned'), (2, 'Hybrid: both automatic and manned')], help_text='Type of observing station, encoding using code table 0 02 001 (set to 0, automatic)', verbose_name='Station Type')),
                ('location', django.contrib.gis.db.models.fields.PointField(help_text='Location of the station', srid=4326, verbose_name='Location')),
                ('station_height_above_msl', models.FloatField(blank=True, help_text='Height of the station ground above mean sea level (to 1 decimal place)', null=True, verbose_name='Station Height Above MSL')),
                ('thermometer_height', models.FloatField(blank=True, help_text='Height of thermometer or temperature sensor above the local ground to 2 decimal places', null=True, verbose_name='Thermometer Height')),
                ('barometer_height_above_msl', models.FloatField(blank=True, help_text='Height of the barometer above mean sea level (to 1 decimal place), typically height of station ground plus the height of the sensor above local ground', null=True, verbose_name='Barometer Height Above MSL')),
                ('anemometer_height', models.FloatField(blank=True, help_text='Height of the anemometer above local ground to 2 decimal places', null=True, verbose_name='Anemometer Height')),
                ('rain_sensor_height', models.FloatField(blank=True, help_text='Height of the rain gauge above local ground to 2 decimal place', null=True, verbose_name='Rain Sensor Height')),
                ('method_of_ground_state_measurement', models.PositiveIntegerField(blank=True, choices=[(0, 'Manual observation'), (1, 'Video camera method'), (2, 'Infrared method'), (3, 'Laser method'), (14, 'Others'), (15, 'Missing value')], help_text='Method of observing the snow depth encoded using code table 0 02 177', null=True, verbose_name='Method of Ground State Measurement')),
                ('method_of_snow_depth_measurement', models.PositiveIntegerField(blank=True, help_text='Method of observing the snow depth encoded using code table 0 02 177', null=True, verbose_name='Method of Snow Depth Measurement')),
                ('time_period_of_wind', models.PositiveIntegerField(blank=True, help_text='Time period over which the wind speed and direction have been averaged. 10 minutes in normal cases or the number of minutes since a significant change occuring in the preceeding 10 minutes.', null=True, verbose_name='Time Period of Wind')),
                ('network', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wis2box_adl.network', verbose_name='Network')),
            ],
            options={
                'verbose_name': 'Station',
                'verbose_name_plural': 'Stations',
            },
        ),
        migrations.CreateModel(
            name='DataIngestionRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(interval='1 day')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('file', models.FileField(upload_to='data_ingestion_events/', verbose_name='File')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wis2box_adl.station', verbose_name='Station')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='station',
            constraint=models.UniqueConstraint(fields=('station_id', 'network'), name='unique_station_id_network'),
        ),
    ]
