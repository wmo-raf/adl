# Generated by Django 5.1.9 on 2025-09-24 08:32

import enum_intflagfield.enumintflagfield
import wagtail.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0024_alter_hourlyobsagg_options_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='dataparameter',
            name='qc_checks',
            field=wagtail.fields.StreamField([('range_check', 3), ('step_check', 7), ('persistence_check', 11), ('spike_check', 15)], blank=True, block_lookup={0: ('wagtail.blocks.FloatBlock', (), {'help_text': 'Minimum acceptable value (inclusive). Leave blank for no minimum.', 'required': False}), 1: ('wagtail.blocks.FloatBlock', (), {'help_text': 'Maximum acceptable value (inclusive). Leave blank for no maximum.', 'required': False}), 2: ('wagtail.blocks.BooleanBlock', (), {'default': True, 'help_text': 'Whether the min and max values are inclusive.', 'required': False}), 3: ('wagtail.blocks.StructBlock', [[('min_value', 0), ('max_value', 1), ('inclusive_bounds', 2)]], {'label': 'Range Check'}), 4: ('wagtail.blocks.FloatBlock', (), {'help_text': 'Maximum allowed change between consecutive readings.', 'min_value': 0, 'required': True}), 5: ('wagtail.blocks.FloatBlock', (), {'help_text': 'Maximum allowed change per minute (rate-based). Leave blank to disable.', 'min_value': 0, 'required': False}), 6: ('wagtail.blocks.IntegerBlock', (), {'default': 30, 'help_text': 'Ignore step checks after data gaps longer than this many minutes.', 'min_value': 1, 'required': True}), 7: ('wagtail.blocks.StructBlock', [[('max_step_change', 4), ('max_step_change_per_minute', 5), ('ignore_after_gap_minutes', 6)]], {'label': 'Step Check'}), 8: ('wagtail.blocks.IntegerBlock', (), {'default': 10, 'help_text': 'Maximum number of consecutive identical readings allowed.', 'min_value': 2, 'required': True}), 9: ('wagtail.blocks.FloatBlock', (), {'default': 0.001, 'help_text': "Tolerance for considering values 'identical' (accounts for sensor precision).", 'min_value': 0, 'required': True}), 10: ('wagtail.blocks.BooleanBlock', (), {'default': True, 'help_text': 'Allow zero values to persist longer (some parameters naturally stay at zero).', 'required': True}), 11: ('wagtail.blocks.StructBlock', [[('max_identical_readings', 8), ('tolerance', 9), ('allow_zero_persistence', 10)]], {'label': 'Persistence Check'}), 12: ('wagtail.blocks.FloatBlock', (), {'default': 3.0, 'help_text': 'Number of standard deviations to define spike threshold.', 'min_value': 0.1, 'required': True}), 13: ('wagtail.blocks.IntegerBlock', (), {'default': 20, 'help_text': 'Number of previous samples to use for calculating statistics.', 'min_value': 5, 'required': True}), 14: ('wagtail.blocks.IntegerBlock', (), {'default': 5, 'help_text': 'Minimum number of samples required to perform spike detection.', 'min_value': 3, 'required': True}), 15: ('wagtail.blocks.StructBlock', [[('threshold_multiplier', 12), ('lookback_samples', 13), ('min_samples', 14)]], {'label': 'Spike Check'})}, null=True, verbose_name='Global Quality Control Checks'),
        ),
        migrations.AddField(
            model_name='observationrecord',
            name='qc_bits',
            field=enum_intflagfield.enumintflagfield.IntFlagField(default=0),
        ),
        migrations.AddField(
            model_name='observationrecord',
            name='qc_status',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Pass'), (1, 'Suspect'), (2, 'Fail'), (3, 'Missing'), (4, 'Estimated'), (5, 'Corrected'), (6, 'Not evaluated')], default=6),
        ),
        migrations.AddField(
            model_name='observationrecord',
            name='qc_version',
            field=models.PositiveIntegerField(default=1),
        ),
        migrations.CreateModel(
            name='QCMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('obs_record_id', models.BigIntegerField(db_index=True)),
                ('obs_time', models.DateTimeField(db_index=True)),
                ('station_id', models.IntegerField()),
                ('parameter_id', models.IntegerField()),
                ('check_type', models.PositiveIntegerField(choices=[(1, 'RANGE'), (2, 'STEP'), (4, 'PERSISTENCE'), (8, 'SPIKE')])),
                ('message', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['obs_record_id'], name='core_qcmess_obs_rec_ef3168_idx'), models.Index(fields=['obs_time', 'station_id'], name='core_qcmess_obs_tim_c93c3c_idx')],
            },
        ),
    ]
